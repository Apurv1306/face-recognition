name: Build Kivy Android APK

on:
  push:
    branches:
      - main # Trigger on push to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Specify a Python version compatible with Kivy/Buildozer

    - name: Install Buildozer and Cython
      # Cython is a build dependency required by Buildozer for compilation.
      run: pip install buildozer cython

    - name: Install system dependencies for Buildozer
      # These are Linux packages required by Buildozer for Android compilation
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libssl-dev libffi-dev libsqlite3-dev liblzma-dev libbz2-dev

    - name: Set up Android SDK and NDK
      # This step explicitly downloads, extracts, and sets up the Android command-line tools
      # to ensure `sdkmanager` is available and on the PATH, resolving "command not found" errors.
      # `set -euxo pipefail` makes the script exit immediately on error and provides verbose output.
      run: |
        set -euxo pipefail

        # Define ANDROID_SDK_ROOT, which is the default location for SDK on GitHub Actions runners
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

        # Create the necessary directory structure for command-line tools
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest/bin

        # Download and extract the latest Android command-line tools if not already present.
        # This ensures sdkmanager is available.
        if [ ! -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "Downloading Android command-line tools..."
          curl -o /tmp/commandlinetools-linux.zip https://dl.google.com/android/repository/commandlinetools-linux-8583021_latest.zip
          unzip /tmp/commandlinetools-linux.zip -d $ANDROID_SDK_ROOT/cmdline-tools/latest
          # The zip might extract into a nested directory, move contents up if so
          if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools" ]; then
            mv $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
            rmdir $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools
          fi
          # Ensure sdkmanager is executable
          chmod +x $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager
        fi

        # Add the command-line tools' bin directory to the PATH for the current shell session.
        # This makes `sdkmanager` directly callable.
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        echo "PATH updated to include sdkmanager: $PATH" # For debugging purposes in logs

        # Install necessary SDK components and NDK explicitly using the now-available sdkmanager.
        # This also implicitly handles license acceptance for these specific components.
        yes | sdkmanager --install "platforms;android-33" "build-tools;33.0.0" "ndk;25.2.8704281"

        # Accept any remaining Android SDK licenses (general acceptance for all components).
        yes | sdkmanager --licenses

    - name: Clean Buildozer cache
      # Clean previous build artifacts to ensure a fresh build.
      run: buildozer clean

    - name: Build Android Debug APK
      # Now that SDK is explicitly set up and licenses accepted, run buildozer.
      run: buildozer android debug

    - name: Upload APK artifact
      # This step uploads the generated APK as a workflow artifact,
      # which you can download from the GitHub Actions run page.
      uses: actions/upload-artifact@v4
      with:
        name: FaceApp-APK
        path: bin/*.apk # The APK will be in the 'bin' directory created by Buildozer
        retention-days: 7 # How long to keep the artifact available for download
